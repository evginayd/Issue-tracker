generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEVELOPER
  TESTER
  PROJECT_LEADER
  MANAGER
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Category {
  FRONTEND
  BACKEND
  DESIGN
  SUPPORT
}

model User {
  id             String          @id
  email          String          @unique
  name           String?
  emailVerified  Boolean
  image          String?
  role           Role            @default(DEVELOPER)
  specialty      Category        @default(BACKEND)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sessions       Session[]
  accounts       Account[]
  assignedIssues Issue[]         @relation("AssignedBy")
  issuesAssigned Issue[]         @relation("Assignee")
  Project        Project[]
  ProjectRole    ProjectMember[]
  CodeSnippet    CodeSnippet[]

  @@map("user")
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  managerId   String
  manager     User            @relation(fields: [managerId], references: [id], onDelete: Cascade)
  issues      Issue[]
  members     ProjectMember[]
  CodeSnippet CodeSnippet[]

  @@map("project")
}

model ProjectMember {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role

  @@unique([projectId, userId])
  @@map("project_member")
}

model Issue {
  id            String       @id @default(uuid())
  title         String
  description   String?
  status        Status       @default(OPEN)
  priority      Priority     @default(MEDIUM)
  category      Category     @default(DESIGN)
  dueDate       DateTime?
  labels        String[]     @default([])
  projectId     String
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedById  String
  assigneeId    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  assignedBy    User         @relation("AssignedBy", fields: [assignedById], references: [id], onDelete: Cascade)
  assignee      User?        @relation("Assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  originalCode  String?
  codeSnippetId String?      @unique
  codeSnippet   CodeSnippet? @relation(fields: [codeSnippetId], references: [id], onDelete: Cascade)

  @@map("issue")
}

model CodeSnippet {
  id        String   @id @default(uuid())
  content   String
  language  String
  userId    String
  projectId String
  createdAt DateTime @default(now())
  issue     Issue?   @relation
  issueId   String?  @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("code_snippet")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
